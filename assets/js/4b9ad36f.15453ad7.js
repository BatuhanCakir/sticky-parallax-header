"use strict";(self.webpackChunkreact_native_sticky_parallax_header_docs=self.webpackChunkreact_native_sticky_parallax_header_docs||[]).push([[6038],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return b}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(n),b=r,m=u["".concat(s,".").concat(b)]||u[b]||p[b]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4041:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),l=["components"],i={sidebar_position:1},s="Custom Tabbed Header",d={unversionedId:"examples/custom-tabbed-header",id:"version-1.0.x/examples/custom-tabbed-header",title:"Custom Tabbed Header",description:"Tabbed Header Customisation",source:"@site/versioned_docs/version-1.0.x/examples/custom-tabbed-header.md",sourceDirName:"examples",slug:"/examples/custom-tabbed-header",permalink:"/sticky-parallax-header/docs/examples/custom-tabbed-header",draft:!1,editUrl:"https://github.com/netguru/sticky-parallax-header/tree/master/docs/versioned_docs/version-1.0.x/examples/custom-tabbed-header.md",tags:[],version:"1.0.x",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"FlashList Headers",permalink:"/sticky-parallax-header/docs/headers/flashlist-headers"},next:{title:"Custom Header",permalink:"/sticky-parallax-header/docs/examples/custom-header"}},c={},p=[{value:"Tabbed Header Customisation",id:"tabbed-header-customisation",level:2},{value:"Custom scrollable tabs",id:"custom-scrollable-tabs",level:2},{value:"Custom tab styling",id:"custom-tab-styling",level:2},{value:"Custom header foreground",id:"custom-header-foreground",level:2},{value:"Custom Header component",id:"custom-header-component",level:2},{value:"Summary - Full source code",id:"summary---full-source-code",level:2}],u={toc:p};function b(e){var t=e.components,i=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-tabbed-header"},"Custom Tabbed Header"),(0,o.kt)("h2",{id:"tabbed-header-customisation"},"Tabbed Header Customisation"),(0,o.kt)("p",null,"Example of custom Tabbar Header styling. Whole source code can be found in the summary of this page."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Tabbed Header Gif",src:n(8958).Z,width:"244",height:"480"})),(0,o.kt)("h2",{id:"custom-scrollable-tabs"},"Custom scrollable tabs"),(0,o.kt)("p",null,"To change tabs to your custom ones, pass ",(0,o.kt)("inlineCode",{parentName:"p"},"tabs")," prop to ",(0,o.kt)("inlineCode",{parentName:"p"},"TabbedHeaderPager")," component, where\n",(0,o.kt)("inlineCode",{parentName:"p"},"title")," is your tab name and then render each tab as a child of ",(0,o.kt)("inlineCode",{parentName:"p"},"TabbedHeaderPager"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const text = {\n  biography: `The bounty hunter known as \"the Mandalorian\" was dispatched by \"the Client\" and Imperial Dr. Pershing to capture the Child alive, however the Client would allow the Mandalorian to return the Child dead for a lower price. ...`,\n  powers:\n    'Grogu was able to harness the mystical energies of the Force on account of being Force-sensitive. One notable display of his power was when he telekinetically lifted a giant mudhorn into the air for a brief time to save Djarin from the charging beast. ...',\n  appearances: `\n  Star Wars: Galaxy of Heroes\n  Star Wars: Squadrons (as toy) (DLC)\n  The-Mandalorian-logo.png The Mandalorian - \"Chapter 1: The Mandalorian\" (First appearance)\n  ...`.trim(),\n};\n\nconst TABS = [\n  {\n    title: 'Biography',\n    description: text.biography,\n  },\n  {\n    title: 'Powers and Abilities',\n    description: text.powers,\n  },\n  {\n    title: 'Appearances',\n    description: text.appearances,\n  },\n];\n\nreturn (\n  <TabbedHeaderPager\n    //...\n    tabs={TABS}\n    //...\n  >\n    {TABS.map((tab, i) => (\n      <View key={i} style={...}>\n        <Text style={...}>{tab.description}</Text>\n      </View>\n    ))}\n  </TabbedHeaderPager>\n)\n")),(0,o.kt)("h2",{id:"custom-tab-styling"},"Custom tab styling"),(0,o.kt)("p",null,"When It comes to tab styling, in TabbedHeader provides following props:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabTextStyle")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tabTextActiveStyle")," to pass styles for tab text whether is inactive or active"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabTextContainerStyle")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tabTextContainerActiveStyle")," to pass styles for tab containers"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabsContainerBackgroundColor")," responsible for backgroundColor of tab bar"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabWrapperStyle")," to pass style for single tab wrapper eg. to change vertical padding"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabsContainerStyle")," to pass style for whole tab bar container eg. to change horizontal padding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const styles = StyleSheet.create({\n  tabTextContainerStyle: {\n    backgroundColor: 'transparent',\n    borderRadius: 18,\n  },\n  tabTextContainerActiveStyle: {\n    backgroundColor: 'orange',\n  },\n  tabText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n    lineHeight: 20,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n  },\n  tabTextActiveStyle: {\n    color: 'black',\n    fontSize: 16,\n    fontWeight: 'bold',\n    lineHeight: 20,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n  },\n  tabWrapperStyle: {\n    paddingVertical: 10,\n  },\n  tabsContainerStyle: {\n    paddingHorizontal: 10,\n  },\n})\n\nreturn (\n  <TabbedHeaderPager\n    //...\n    tabsContainerBackgroundColor={colors.black}\n    tabTextContainerStyle={styles.tabTextContainerStyle}\n    tabTextContainerActiveStyle={styles.tabTextContainerActiveStyle}\n    tabTextStyle={styles.tabText}\n    tabTextActiveStyle={styles.tabTextActiveStyle}\n    tabWrapperStyle={styles.tabWrapperStyle}\n    tabsContainerStyle={styles.tabsContainerStyle}\n    //...\n  >\n    {/** content */}\n  </TabbedHeaderPager>\n)\n")),(0,o.kt)("h2",{id:"custom-header-foreground"},"Custom header foreground"),(0,o.kt)("p",null,"Instead of setting header color by ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor")," prop, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundImage")," and pass an image.\nIn the TabbarHeader example there is a small avatar image and title below, we can set the first one by passing\nimage to the ",(0,o.kt)("inlineCode",{parentName:"p"},"foregroundImage")," prop.\nTo customise title, we can pass it by title prop ",(0,o.kt)("inlineCode",{parentName:"p"},'title="Baby Yoda"')," and then pass styles by ",(0,o.kt)("inlineCode",{parentName:"p"},"titleStyle")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const styles = StyleSheet.create({\n  titleStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    padding: 10,\n    fontSize: 40,\n    backgroundColor: 'rgba(0,0,0,0.6)'\n  }\n})\n\nreturn (\n  <TabbedHeaderPager\n    // ...\n    backgroundImage={{\n      uri: 'https://yoda.jpeg',\n    }}\n    title=\"Baby Yoda\"\n    titleStyle={styles.titleStyle}\n    foregroundImage={{\n      uri: 'https://starwars.png',\n    }}\n    // ...\n  >\n    {/** content */}\n  </TabbedHeaderPager>\n)\n")),(0,o.kt)("h2",{id:"custom-header-component"},"Custom Header component"),(0,o.kt)("p",null,"Instead of passing your own logo to the header, you can create component and pass it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"renderHeaderBar")," prop. It allows you to create back/close button and create custom animations"),(0,o.kt)("p",null,"In the example below there is custom header containing close button which is visible all the time,\nand the title displayed on header, visible only when the header is in closed state."),(0,o.kt)("p",null,"In order to do this, we save vertical content offset in a Reanimated's shared value and then use it to interpolate opacity value of the View with the title."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const HeaderBar = ({ scrollValue }) => {\n  //...\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return { opacity: interpolate(scrollValue.value, [0, 60, 90], [0, 0, 1], Extrapolate.CLAMP) };\n  });\n\n  return (\n    <SafeAreaView edges={['top', 'left', 'right']} style={...}>\n      <View style={...}>\n        <TouchableOpacity onPress={...}>\n          <Image\n            style={...}\n            resizeMode=\"contain\"\n            source={{\n              uri: 'https://close.png',\n            }}\n          />\n        </TouchableOpacity>\n        <Animated.View style={animatedStyle}>\n          <Text style={...}>Baby Yoda</Text>\n        </Animated.View>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst YodaScreen = () => {\n  // ...\n  const scrollValue = useSharedValue(0);\n\n  function handleScroll(e: NativeScrollEvent) {\n    'worklet';\n    scrollValue.value = e.contentOffset.y;\n  }\n\n  return (\n    <TabbedHeaderPager\n      // ...\n      onScroll={handleScroll}\n      renderHeaderBar={() => <HeaderBar scrollValue={scrollValue} />}\n    >\n      {/** content */}\n    </TabbedHeaderPager>\n  )\n}\n")),(0,o.kt)("h2",{id:"summary---full-source-code"},"Summary - Full source code"),(0,o.kt)("p",null,"Full source code can be found in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/netguru/sticky-parallax-header/blob/master/example/src/screens/YodaScreen/index.tsx"},"example repo")))}b.isMDXComponent=!0},8958:function(e,t,n){t.Z=n.p+"assets/images/readme_yoda-62f213f100873a3acee9d10b23333c2a.gif"}}]);