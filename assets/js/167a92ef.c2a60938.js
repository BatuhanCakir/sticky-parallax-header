"use strict";(self.webpackChunkreact_native_sticky_parallax_header_docs=self.webpackChunkreact_native_sticky_parallax_header_docs||[]).push([[4629],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),i=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},u=function(e){var r=i(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=i(t),m=o,y=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return t?n.createElement(y,l(l({ref:r},u),{},{components:t})):n.createElement(y,l({ref:r},u))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=d;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var i=2;i<a;i++)l[i]=t[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2638:function(e,r,t){t.r(r),t.d(r,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p}});var n=t(3117),o=t(102),a=(t(7294),t(3905)),l=["components"],c={sidebar_position:2},s="Custom Header",i={unversionedId:"examples/custom-header",id:"examples/custom-header",title:"Custom Header",description:"To create custom header layout, you'll have to use StickyHeader(ScrollView|FlatList|SectionList) & useStickyHeaderScrollProps. If you want to use custom scroll component, instead of StickyHeader(ScrollView|FlatList|SectionList), you can wrap your custom scroll component in withStickyHeader HOC.",source:"@site/docs/examples/custom-header.md",sourceDirName:"examples",slug:"/examples/custom-header",permalink:"/sticky-parallax-header/docs/next/examples/custom-header",draft:!1,editUrl:"https://github.com/netguru/sticky-parallax-header/tree/master/docs/docs/examples/custom-header.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Custom Tabbed Header",permalink:"/sticky-parallax-header/docs/next/examples/custom-tabbed-header"},next:{title:"Scroll component reference",permalink:"/sticky-parallax-header/docs/next/guides/scrollview-reference"}},u={},p=[{value:"Scroll props",id:"scroll-props",level:2},{value:"Display custom header/tabs layout",id:"display-custom-headertabs-layout",level:2},{value:"Summary - Full source code",id:"summary---full-source-code",level:2}],d={toc:p};function m(e){var r=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-header"},"Custom Header"),(0,a.kt)("p",null,"To create custom header layout, you'll have to use ",(0,a.kt)("inlineCode",{parentName:"p"},"StickyHeader(ScrollView|FlatList|SectionList)")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"useStickyHeaderScrollProps"),". If you want to use custom scroll component, instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"StickyHeader(ScrollView|FlatList|SectionList)"),", you can wrap your custom scroll component in ",(0,a.kt)("inlineCode",{parentName:"p"},"withStickyHeader")," HOC."),(0,a.kt)("h2",{id:"scroll-props"},"Scroll props"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useStickyHeaderScrollProps"),' is a hook responsible for creating "snap effect" behavior'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const {\n  onMomentumScrollEnd,\n  onScroll,\n  onScrollEndDrag,\n  scrollHeight,\n  scrollValue,\n  scrollViewRef,\n} = useStickyHeaderScrollProps({\n  parallaxHeight: PARALLAX_HEIGHT,\n  snapStartThreshold: SNAP_START_THRESHOLD,\n  snapStopThreshold: SNAP_STOP_THRESHOLD,\n  snapToEdge: true,\n});\n")),(0,a.kt)("p",null,"Props returned from ",(0,a.kt)("inlineCode",{parentName:"p"},"useStickyHeaderScrollProps")," should be passed to sticky header component (",(0,a.kt)("inlineCode",{parentName:"p"},"StickyHeader(ScrollView|FlatList|SectionList)")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"withStickyHeader")," decorated scroll component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<StickyHeaderScrollView\n  ref={scrollViewRef}\n  onScroll={onScroll}\n  onMomentumScrollEnd={onMomentumScrollEnd}\n  onScrollEndDrag={onScrollEndDrag}\n  renderHeader={() => {\n    /** \n     * If you need, pass `scrollHeight` & `scrollValue` from `useStickyHeaderScrollProps`\n     * \n     * Remember to add pointerEvents="box-none" and pointerEvents="none" to header components, to make header part scrollable\n     */\n    return (\n      <View pointerEvents="box-none" style={{ height: scrollHeight }}>\n        <Foreground scrollValue={scrollValue} />\n      </View>\n    );\n  }}\n  // ...\n  >\n  {/** content */}\n</StickyHeaderScrollView>\n')),(0,a.kt)("h2",{id:"display-custom-headertabs-layout"},"Display custom header/tabs layout"),(0,a.kt)("p",null,"To display custom header or tabs layout, use ",(0,a.kt)("inlineCode",{parentName:"p"},"renderHeader")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"renderTabs")," props"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<StickyHeaderScrollView\n  // ...\n  renderHeader={() => {\n    /** \n     * If you need, pass `scrollHeight` & `scrollValue` from `useStickyHeaderScrollProps`\n     * \n     * Remember to add pointerEvents="box-none" and pointerEvents="none" to header components, to make header part scrollable\n     */\n    return (\n      <View pointerEvents="box-none" style={{ height: scrollHeight }}>\n        <Foreground scrollValue={scrollValue} />\n      </View>\n    );\n  }}\n  // ...\n  >\n  {/** content */}\n</StickyHeaderScrollView>\n')),(0,a.kt)("h2",{id:"summary---full-source-code"},"Summary - Full source code"),(0,a.kt)("p",null,"Full source code can be found in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/netguru/sticky-parallax-header/blob/master/example/src/screens/SimsScreen/index.tsx"},"example repo")))}m.isMDXComponent=!0}}]);