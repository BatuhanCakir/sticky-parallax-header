"use strict";(self.webpackChunkreact_native_sticky_parallax_header_docs=self.webpackChunkreact_native_sticky_parallax_header_docs||[]).push([[2483],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=d(n),u=r,y=h["".concat(s,".").concat(u)]||h[u]||p[u]||o;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1661:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},s="Custom Tabbed Header",d={unversionedId:"examples/custom-tabbed-header",id:"version-0.4.x/examples/custom-tabbed-header",title:"Custom Tabbed Header",description:"Tabbed Header Customisation",source:"@site/versioned_docs/version-0.4.x/examples/custom-tabbed-header.md",sourceDirName:"examples",slug:"/examples/custom-tabbed-header",permalink:"/sticky-parallax-header/docs/0.4.x/examples/custom-tabbed-header",draft:!1,editUrl:"https://github.com/netguru/sticky-parallax-header/tree/master/docs/versioned_docs/version-0.4.x/examples/custom-tabbed-header.md",tags:[],version:"0.4.x",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Custom Header",permalink:"/sticky-parallax-header/docs/0.4.x/headers/custom-header"},next:{title:"Custom Header",permalink:"/sticky-parallax-header/docs/0.4.x/examples/custom-header"}},c={},p=[{value:"Tabbed Header Customisation",id:"tabbed-header-customisation",level:2},{value:"Custom tab styling",id:"custom-tab-styling",level:2},{value:"Custom Header component",id:"custom-header-component",level:2},{value:"Summary - Full source code",id:"summary---full-source-code",level:2}],h={toc:p};function u(e){var t=e.components,l=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-tabbed-header"},"Custom Tabbed Header"),(0,o.kt)("h2",{id:"tabbed-header-customisation"},"Tabbed Header Customisation"),(0,o.kt)("p",null,"Example of custom Tabbar Header styling. Whole source code can be found in the summary of this page."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Tabbed Header Gif",src:n(8958).Z,width:"244",height:"480"})),(0,o.kt)("p",null,"To change tabs to your custom ones, pass ",(0,o.kt)("inlineCode",{parentName:"p"},"tabs")," prop to StickyParallaxHeader component, where\n",(0,o.kt)("inlineCode",{parentName:"p"},"title")," is your tab name and ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," is a component to render for specific tab:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"tabs={[\n  {\n    title: 'Biography',\n    content: renderContent(text)\n  },\n  {\n    title: 'Powers and Abilities',\n    content: renderContent(text1)\n  },\n  {\n    title: 'Appearances',\n    content: renderContent(text2)\n  }\n]}\n")),(0,o.kt)("p",null,"Example of such component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const windowHeight = Dimensions.get('window').height\nconst styles = StyleSheet.create({\n  contentContiner: {\n    height: windowHeight,\n    padding: 10\n  },\n  contentText: {\n    fontSize: 16\n  }\n})\nconst renderContent = x => (\n  <View\n    style={styles.contentContiner}>\n    <Text style={styles.contentText}>{x}</Text>\n  </View>\n)\n")),(0,o.kt)("h2",{id:"custom-tab-styling"},"Custom tab styling"),(0,o.kt)("p",null,"When It comes to tab styling, in TabbedHeader there are seven props:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabTextStyle")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tabTextActiveStyle")," to pass styles for tab text wheter is inactive or active"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabTextContainerStyle")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tabTextContainerActiveStyle")," to pass styles for tab containers"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor")," responsible for backgroundColor of whole header and tab bar"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabWrapperStyle")," to pass style for single tab wrapper eg. to change vertical padding"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tabsContainerStyle")," to pass style for whole tab bar container eg. to change horizontal padding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const styles = StyleSheet.create({\n  tabTextContainerStyle: {\n    backgroundColor: 'transparent',\n    borderRadius: 18\n  },\n  tabTextContainerActiveStyle: {\n    backgroundColor: '#FFC106'\n  },\n  tabTextStyle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    lineHeight: 20,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    color: 'white',\n  },\n  tabTextActiveStyle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    lineHeight: 20,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    color: 'black',\n  },\n  tabWrapperStyle: {\n    paddingVertical: 10\n  },\n  tabsContainerStyle: {\n    paddingHorizontal: 10\n  }\n})\n\nreturn (\n  <StickyParallaxHeader\n    headerType=\"TabbedHeader\"\n    tabTextContainerStyle={styles.tabTextContainerStyle}\n    tabTextContainerActiveStyle={styles.tabTextContainerActiveStyle}\n    tabTextStyle={styles.tabTextStyle}\n    tabTextActiveStyle={styles.tabTextActiveStyle}\n    tabWrapperStyle={styles.tabWrapperStyle}\n    tabsContainerStyle={styles.tabsContainerStyle}\n    backgroundColor={'black'}\n  />\n)\n")),(0,o.kt)("p",null,"Instead of setting header color by ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor")," prop, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundImage")," and pass an image.\nIn the TabbarHeader example there is a small avatar image and title below, we can set the first one by passing\nimage to the ",(0,o.kt)("inlineCode",{parentName:"p"},"foregroundImage")," prop.\nTo customise title, we can pass it by title prop ",(0,o.kt)("inlineCode",{parentName:"p"},"title={'Baby Yoda'}")," and then pass styles by ",(0,o.kt)("inlineCode",{parentName:"p"},"titleStyle")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const styles = StyleSheet.create({\n  titleStyle: {\n    color: 'white',\n  }\n})\n\nreturn (\n  <StickyParallaxHeader\n    headerType=\"TabbedHeader\"\n    backgroundImage={{\n      uri: 'https://yoda.jpeg',\n    }}\n    title={'Baby Yoda'}\n    titleStyle={styles.titleStyle}\n    foregroundImage={{\n      uri:'https://starwars.png'\n    }}\n  />\n)\n")),(0,o.kt)("h2",{id:"custom-header-component"},"Custom Header component"),(0,o.kt)("p",null,"Instead of passing your own logo to the header, you can create component and pass It to the ",(0,o.kt)("inlineCode",{parentName:"p"},"header")," prop. It allows you to create back/close button and create custom animations"),(0,o.kt)("p",null,"In the example below there is custom header containing close button which is visible all the time,\nand the title displayed on header, visible only when the header is in closed state."),(0,o.kt)("p",null,"In order to do this, we used ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollEvent")," prop and ",(0,o.kt)("inlineCode",{parentName:"p"},"Animated")," library to interpolate opacity value\nof the View with the title."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const CutomHeaderScreen = () => {\n  const renderHeader = () => {\n    const opacity = scrollY.y.interpolate({\n      inputRange: [0, 60, 90],\n      outputRange: [0, 0, 1],\n      extrapolate: 'clamp',\n    })\n\n    return (\n      <View\n        style={styles.headerCotainer}>\n        <View style={styles.headerWrapper}>\n          <TouchableOpacity onPress={() => {}}>\n            <Image\n              style={styles.headerImage}\n              resizeMode=\"contain\"\n              source={{\n                uri: 'https://close.png',\n              }}\n            />\n          </TouchableOpacity>\n          <Animated.View style={{ opacity }}>\n            <Text\n              style={styles.headerText}>\n              Baby Yoda\n            </Text>\n          </Animated.View>\n        </View>\n      </View>\n    )\n  }\n\n  return (\n    <StickyParallaxHeader\n      headerType=\"TabbedHeader\"\n      header={renderHeader}\n      scrollEvent={event(\n        [{ nativeEvent: { contentOffset: { y: scrollY.y } } }],\n        { useNativeDriver: false }\n      )}\n    />\n  )\n}\n")),(0,o.kt)("h2",{id:"summary---full-source-code"},"Summary - Full source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import * as React from 'react'\nimport {\n  Text,\n  View,\n  Dimensions,\n  TouchableOpacity,\n  Image,\n  Animated,\n  StyleSheet\n} from 'react-native'\nimport StickyParallaxHeader from 'react-native-sticky-parallax-header'\n\nconst windowHeight = Dimensions.get('window').height\nconst { event, ValueXY } = Animated\nconst scrollY = new ValueXY()\nconst text = {\n  biography:`The bounty hunter known as \"the Mandalorian\" was dispatched by \"the Client\" and Imperial Dr. Pershing to capture the Child alive, however the Client would allow the Mandalorian to return the Child dead for a lower price.\n  The assassin droid IG-11 was also dispatched to terminate him. After working together to storm the encampment the infant was being held in, the Mandalorian and IG-11 found the Child. IG-11 then attempted to terminate the Child. The Mandalorian shot the droid before the he was able to assassinate the Child.\n  Shortly after, the Mandalorian took the Child back to his ship. On the way they were attacked by a trio of Trandoshan bounty hunters, who attempted to kill the Child. After the Mandalorian defeated them, he and the Child camped out in the desert for the night. While the Mandalorian sat by the fire, the Child ate one of the creatures moving around nearby. He then approached the bounty hunter and attempted to use the Force to heal one of the Mandalorian's wounds. The Mandalorian stopped him and placed him back into his pod. The next day, the pair made it to the Razor Crest only to find it being scavenged by Jawas. The Mandalorian attacked their sandcrawler for the scavenged parts and attempted to climb it while the Child followed in his pod. However, the Mandalorian was knocked down to the ground`,\n  powers: \"Powers and Abilities\",\n  appearances: \"Appearances\"\n}\nconst styles = StyleSheet.create({\n  headerCotainer: {\n    width: '100%',\n    paddingHorizontal: 24,\n    paddingTop: 55,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: 'black'\n  },\n  headerWrapper: {\n    flexDirection: 'row', alignItems: 'center'\n  },\n  headerImage: {\n    width: 20,\n    height: 20\n  },\n  headerText: {\n    color: 'white',\n    paddingLeft: 20,\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  titleStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    padding: 10,\n    fontSize: 40,\n    backgroundColor: 'rgba(0,0,0,0.6)'\n  },\n  tabTextContainerStyle: {\n    backgroundColor: 'transparent',\n    borderRadius: 18\n  },\n  tabTextContainerActiveStyle: {\n    backgroundColor: '#FFC106'\n  },\n  tabTextStyle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    lineHeight: 20,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    color: 'white',\n  },\n  tabTextActiveStyle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    lineHeight: 20,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    color: 'black',\n  },\n  tabWrapperStyle: {\n    paddingVertical: 10\n  },\n  tabsContainerStyle: {\n    paddingHorizontal: 10\n  },\n  contentContiner: {\n    height: windowHeight,\n    padding: 10\n  },\n  contentText: {\n    fontSize: 16\n  }\n})\n\nconst CutomHeaderScreen = () => {\n  const renderContent = x => (\n    <View\n      style={styles.contentContiner}>\n      <Text style={styles.contentText}>{x}</Text>\n    </View>\n  )\n  const renderHeader = () => {\n    const opacity = scrollY.y.interpolate({\n      inputRange: [0, 60, 90],\n      outputRange: [0, 0, 1],\n      extrapolate: 'clamp',\n    })\n\n    return (\n      <View\n        style={styles.headerCotainer}>\n        <View style={styles.headerWrapper}>\n          <TouchableOpacity onPress={() => console.warn('CLICKED')}>\n            <Image\n              style={styles.headerImage}\n              resizeMode=\"contain\"\n              source={{\n                uri:\n                  'https://close.png',\n              }}\n            />\n          </TouchableOpacity>\n          <Animated.View style={{ opacity }}>\n            <Text\n              style={styles.headerText}>\n              Baby Yoda\n            </Text>\n          </Animated.View>\n        </View>\n      </View>\n    )\n  }\n\n  return (\n    <StickyParallaxHeader\n      headerType=\"TabbedHeader\"\n      backgroundImage={{\n        uri: 'https://yoda.jpeg',\n      }}\n      backgroundColor={'black'}\n      header={renderHeader}\n      title={'Baby Yoda'}\n      titleStyle={styles.titleStyle}\n      foregroundImage={{\n        uri:\n          'https://starwars.png',\n      }}\n      tabs={[\n        {\n          title: 'Biography',\n          content: renderContent(text.biography)\n        },\n        {\n          title: 'Powers and Abilities',\n          content: renderContent(text.powers)\n        },\n        {\n          title: 'Appearances',\n          content: renderContent(text.appearances)\n        }\n      ]}\n      tabTextContainerStyle={styles.tabTextContainerStyle}\n      tabTextContainerActiveStyle={styles.tabTextContainerActiveStyle}\n      tabTextStyle={styles.tabTextStyle}\n      tabTextActiveStyle={styles.tabTextActiveStyle}\n      tabWrapperStyle={styles.tabWrapperStyle}\n      tabsContainerStyle={styles.tabsContainerStyle}\n      scrollEvent={event(\n        [{ nativeEvent: { contentOffset: { y: scrollY.y } } }],\n        { useNativeDriver: false }\n      )}\n    />\n  )\n}\n\nexport default CutomHeaderScreen\n")))}u.isMDXComponent=!0},8958:function(e,t,n){t.Z=n.p+"assets/images/readme_yoda-62f213f100873a3acee9d10b23333c2a.gif"}}]);